1-2安装与环境
Go语言的安装与开发环境
下载：https://golang.org/dl/
开发环境：vscode+go插件
IDE：GoLand, liteIDE

2-1变量定义
使用var关键字
    var a, b, c bool
    var s1, s2 string = "hello", "world"
    可放在函数内，或直接放在包内
    使用var()集中定义变量
让编译器自动决定类型
    var a, b, i, s1, s2 = true, false, 3, "hello", "world"
使用:=定义变量
    a, b, i, s1, s2 := true, false, 3, "hello", "world"
    只能在函数内使用

2-2内建变量类型
bool, string
(u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr(指针)
byte(1字节， 8位), rune(字符型, char, 32位)
float32, float64
complex64(复数，实部和虚部分别是32位的float)
complex128(复数，实部和虚部分别是64位的float)
强制类型转换
类型转换是强制的，不存在隐式类型转换
var a, b int = 3, 4
var c int = int(math.Sqrt(float64(a*a + b*b)))

2-3常量与枚举
常量的定义
const filename = "abc.txt"
const数值可作为各种类型使用
const a, b = 3, 4
var c int = int(math.Sqrt(a*a + b*b))
使用常量枚举类型
普通枚举类型
自增值枚举类型

变量定义要点回顾
变量类型写在变量名之后
编译器可推测变量类型
没有char，只有rune

2-4条件语句
if
    if的条件里不需要括号
	if contents, err := ioutil.ReadFile(filename); err == nil {
		fmt.Println(string(contents))
	} else {
		fmt.Println("cannot print file contents:", err)
	}
    if的条件里可以赋值
    if的条件里赋值的变量作用域就在这个if语句里
switch
	var result int
	switch op {
	case "+":
		result = a + b
	case "-":
		result = a - b
	case "*":
		result = a * b
	case "/":
		result = a / b
	default:
		panic("unsupported operator:" + op)
	}
    switch会自动break，除非使用fallthrough
    switch {
	case score < 0 || score > 100:
		panic(fmt.Sprintf(
			"Wrong score: %d", score))
	case score < 60:
		g = "F"
	case score < 80:
		g = "C"
	case score < 90:
		g = "B"
	case score <= 100:
		g = "A"
	}
    switch后可以没有表达式

2-5循环语句

